# Websocket server port.
db-port = 443

# The adm server hostname.
db-host = https://occase.de/

# The password used to access the adm pages, where posts can be
# deleted from the database in the address
#
#    https://occase.de/posts/id/password
#
# id refers to the first post id that will be shown in page. The total
# number of posts returned in the page is still not configurable.
adm-password = kabuff

# The time after which the post is considered expired. On expiration
# the posts are not automatically removed but only when there is
# publication on the channel the post belongs to. In the future we
# may add an evict command to remove expired posts, this may be
# necessary to release memory.
#
# When a publication in the channel takes place and some of its posts
# are removed, a delete command is issued to all databases and it is
# also removed from redis.
#
# WARNING: Pay attention to the value used here since the posts are
# deleted from the database as well.
# Input in seconds.
post-expiration = 7776000

# The size of the tcp backlog, see
# boost::asio::socket_base::max_listen_connections and
# tcp_max_syn_backlog on man tcp(7)
#    
max-listen-connections = 511

# File containing the server certificate.
#
# NOTE: When using ssl use port 443.
#
ssl-certificate-file = /etc/letsencrypt/live/occase.de/fullchain.pem

# File containing the server private key.
ssl-private-key-file = /etc/letsencrypt/live/occase.de/privkey.pem

# File containing Diffie-Hellman parameters. Can be generated with
# the following command
#
# $ openssl dhparam -out dhparam4096.pem 4096
#
ssl-dh-file = /etc/occase/dhparam4096.pem

# Refer to the documentation in Beast for a better explanation
# https://www.boost.org/doc/libs/1_71_0/libs/beast/doc/html/beast/ref/boost__beast__websocket__stream_base__timeout.html
handshake-timeout = 10

# Refer to the documentation in Beast for a better explanation
# https://www.boost.org/doc/libs/1_71_0/libs/beast/doc/html/beast/ref/boost__beast__websocket__stream_base__timeout.html
# 
# The server will also set keep_alive_pings to true.
#
# NOTE: After accepting the webscoket connection the server will
# timeout it on the second pong received if it does not
# 
#    1. Send his credentials to be validated agains the database.
# 
#    2. Or request a registration.
# 
idle-timeout = 30

# A channel is in simple terms a container of websocket sessions. When a
# websocket connection is closed it is not removed from the channel
# since that would be a computationly expensive operation. Instead, when
# the sessions are traversed (on every publish) those that are dead a
# removed. However, some channels may have a rather low publish rate and
# that can result in an ever increasing number of dead websocket
# sessions. To prevent that, this configuration option specifies how many
# websocket sessions we can insert in the channel when there is no
# publish activity before we trigger a cleanup.
# 
#   - Doing a cleanup too frequently may have a performance cost since
#     it requires traversal.
# 
#   - Not doing it frequenty may cause more memory usage.
# 
# Remember that there may thousends of channels. It is a trade-off
# between memory usage and cpu usage.
channel-cleanup-rate = 256

# We use the same log levels as syslog, they are
#
#  - emerg
#  - alert
#  - crit
#  - err
#  - warning
#  - notice
#  - info
#  - debug
log-level = debug

# Every time an app connects to the server it also performs a subscribe
# to each channel it wants to receive messages from. It is possible to
# impose a limit on the this number. This improves server performance
# at the expense of not sending the user messages he wants.
max-channels-subscribe = 500

# Apps are allowed to publish n posts every k seconds. The value of k is
# stored per user and has a default value passed below. When n reaches 0
# the server will reset the values.
#
# - To prevent a user from posting set n to zero and k to a very high
#   value.
# - To allow a user to always post set k to a say, one second.
# - To allow on post per week set n to 1 and k to 60 * 60 * 24 * 7.
post-interval = 40
post-count = 1

# The maximum number of posts collect from the database to be sent to
# the app on each connection.
max-posts-on-subscribe = 1024

# The size of the automatically generated password.
password-size = 10

# The maximum duration of the adm http request in seconds.
http-session-timeout = 30

# The maximum duration of the ssl shutdown in seconds.
ssl-shutdown-timeout = 30

# The maximum duration of the ssl shutdown
server-name = occase-db

# Multimedia server parameters
#-----------------------------------------------------------------------

# The key used to generate *authenticated* filenames to the image
# server. Should be kept as a secret shared between occase-db and
# occase-mms.
mms-key = jTGcIm0rBMSP1BJRJNju3085zwgnVs9w

# The host on which the mms server is listening. This is used by the
# adm server to produce the html pages that make it possible to delete
# posts with inapropriate images. The port must also be specified.
mms-host = http://occase.de/

# Redis related configuration.
#-----------------------------------------------------------------------

# The host of the first redis server.
redis-host1 = 127.0.0.1:6379

# The host of the second redis server.
redis-host2 = 127.0.0.1:6379

# (Incompleted) Redis sentinel host and port. This is where the redis
# server host and port will be read from.
redis-sentinels = 127.0.0.1:26379

# The maximum allowed size if redis pipelining. Higher values will
# greately improve performance on high message rate.
redis-max-pipeline-size = 2048

# The key where the channels json command will be available. See the too
# occase-load-tool for how to set this key.
redis-key-channels = channels

# All posts get an id that is obtained by increasing this redis key by one.
redis-key-post-id = post_id_counter

# The number of of users registered in the system so far, spikes on the
# rate of growth of this number may indicate a server exploitation.
redis-key-user-id = user_id_counter

# The total number of chat messages sent so far. Useful for
# statistics.
redis-key-chat-msgs-counter = chat_msgs_counter

# Every user has a list of chat messages that is composed by this
# value plus # the user id.
redis-key-chat-msg-prefix = chat

# A sorted set containing the posts.
redis-key-posts = posts

# The channel where workers make posts they receive available to other
# workers.
redis-key-menu-channel = menu_channel

# The prefix to every id holding user data (password for example).
redis-key-user-data-prefix = ids

# The interval that will be used to try to restablish a connection
# with redis if it is lost.
redis-conn-retry-interval = 500

# If an app does not connect for the duration of this time counting
# from its last login, then its chat messages will be removed from redis.
redis-user-msg-exp-time = 604800

# The max number of offline messages allowed in the redis for each user.
redis-offline-chat-msgs = 100

