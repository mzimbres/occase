# Websocket server port.
port = 81

# The size of the tcp backlog, see
# boost::asio::socket_base::max_listen_connections and
# tcp_max_syn_backlog on man tcp(7)
#    
max-listen-connections = 511

# The port on which useful server information will be available.
stats-server-base-port = 9090

# Informs syslog to log information on stderr, can be either yes or
# no. Notice that when the server runs as daemon, file descriptors for
# stdin, stdout and stderr are closed.
log-on-stderr = no

# The server will daemonize itself after startup.
daemonize = yes

# The location the pid file will be written to.
pidfile = /run/menu-chat-server.pid

# After accepting the webscoket connection the server will start a timer
# with this value. The user is expected to
# 
#    1. Either send his credentials to be validated agains those in the
#       database
# 
#    2. Or request a registration.
# 
# If the user fails to do one of these in the specified time, the
# websocket will be closed. A clean websocket close is performed.
login-timeout = 3

# The time we are willing to wait for the websocket handshake to
# complete, even in slow networks this should not exceed a couple of
# seconds.
handshake-timeout = 3

# Webscoket ping-pong is used to ensure the other side of the connection
# is still alive. If this timeout fires the connection will be closed.
pong-timeout = 30

# A websocket connection is considered to have cleanly been closed both
# endpints have to receive a close frame from each other. This is the
# time we are willing to wait for the close frame.
close-frame-timeout = 3

# A channel is in simple terms a container of websocket sessions. When a
# websocket connection is closed it is not removed from the channel
# since that would be a computationly expensive operation. Instead, when
# the sessions are traversed (on every publish) those that are dead a
# removed. However, some channels may have a rather low publish rate and
# that can result in an ever increasing number of dead websocket
# sessions. To prevent that, this configuration option specifies how many
# websocket sessions we can insert in the channel when there is no
# publish activity before we trigger a cleanup.
# 
#   - Doing a cleanup too frequently may have a performance cost since
#     it requires traversal.
# 
#   - Not doing it frequenty may cause more memory usage.
# 
# Remember that there may thousends of channels. It is a trade-off
# between memory usage and cpu usage.
channel-cleanup-rate = 128

# We use the same log levels as syslog, they are
#
#  - emerg
#  - alert
#  - crit
#  - err
#  - warning
#  - notice
#  - info
#  - debug
log-level = debug

# Every time an app connects to the server it also performs a subscribe
# to each channel it wants to receive messages from. It is possible to
# impose a limit on the this number. This improves server performance
# at the expense of not sending the user messages he wants.
max-channels-subscribe = 500

# The maximum number of posts allowed to be sent to the app on each
# connection. If more that this number of posts is available to posts
# with lower id are taken, so that on the next login more posts can be
# sent to the user.
max-posts-on-subscribe = 128

# The size of the automatically generated password.
password-size = 10

# If provided, the server will try to increase the number of file
# descriptors to this value, via setrlimit. The default value -1 means
# nothing will be done.
number-of-fds = 100000

# The host of the first redis server.
redis-host1 = 127.0.0.1:6379

# The host of the second redis server.
redis-host2 = 127.0.0.1:6379

# (Incompleted) Redis sentinel host and port. This is where the redis
# server host and port will be read from.
redis-sentinels = 127.0.0.1:26379

# The maximum allowed size if redis pipelining. Higher values will
# greately improve performance on high message rate.
redis-max-pipeline-size = 2048

# The key where the menu json command will be available. See the too
# menu-chat-load-tool for how to set this key.
redis-key-menu = menu

# All posts get an id that is obtained by increasing this redis key by one.
redis-key-post-id = post_id_counter

# The number of of users registered in the system so far, spikes on the
# rate of growth of this number may indicate a server exploitation.
redis-key-user-id = user_id_counter

# The total number of chat messages sent so far. Useful for
# statistics.
redis-key-chat-msgs-counter = chat_msgs_counter

# Every user has a list of chat messages that is composed by this
# value plus # the user id.
redis-key-chat-msg-prefix = chat

# A sorted set containing the posts.
redis-key-posts = posts

# The channel where workers make posts they receive available to other
# workers.
redis-key-menu-channel = menu_channel

# The prefix to every id holding user data (password for example).
redis-key-user-data-prefix = ids

# The interval that will be used to try to restablish a connection
# with redis if it is lost.
redis-conn-retry-interval = 500

# If an app does not connect for the duration of this time counting
# from its last login, then its chat messages will be removed from redis.
redis-user-msg-exp-time = 604800

# The max number of offline messages allowed in the redis for each user..
redis-offline-chat-msgs = 1000

